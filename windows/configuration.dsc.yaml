# ymal-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  assertions:
    - resource: Microsoft.Windows.Developer/OsVersion
      id: OsVersion
      directives:
        description: Minimum OS version requirement
      settings:
        MinVersion: "10.0.22621.2338"
  resources:
    - resource: Microsoft.Windows.Settings/WindowsSettings
      directives:
        description: Configure Windows Settings
        securityContext: elevated
      settings:
        AppColorMode: 'Dark'
        DeveloperMode: true
    - resource: PSDscResources/Script
      id: DisableUAC
      directives:
        description: Disables User Account Control (UAC)
        securityContext: elevated
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f
        GetScript: return $false
        TestScript: return $false
    - resource: VirtualHardDisk
      id: VHD
      directives:
        description: Create a new Virtual Hard Drive
        module: StorageDsc
        securityContext: elevated
      settings:
        FilePath: 'C:\Users\ariellourenco\DevDrives\DevHome.vhdx'
        DiskSize: 65552Mb
        DiskFormat: 'Vhdx'
        DiskType: 'Dynamic'
        Ensure: 'Present'
    - resource: Disk
      id: DevDrive
      dependsOn:
        - VHD
      directives:
        description: Format a new Dev Drive volume onto VHD
        module: StorageDsc
        securityContext: elevated
      settings:
        DiskId: 1
        DiskIdType: 'Number'
        DriveLetter: 'D'
        FSLabel: 'Dev Drive'
        DevDrive: true
        AllowDestructive: true
        PartitionStyle: 'GPT'
        FSFormat: 'ReFS'
        Size: 64Gb
    # The PSDscResources/Environment only creates environment variables in the Machine and Process targets.
    # However, as we are using a per-user directory path location to store our Dev Drive to avoid any
    # unintentional sharing we need to set a user-level environment variable to store package caches.
    # See: https://learn.microsoft.com/en-us/windows/dev-drive/#storing-package-cache-on-dev-drive
    - resource: PSDscResources/Script
      id: Nuget.Packages
      directives:
        description: Manage NuGet global packages
      settings:
        SetScript: |
          $destinationPath = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData)

          # Replace backslashes with forward slashes
          $gnupgHome = $destinationPath -replace '\\', '/'

          # Convert drive letter (e.g. C:) to lowercase
          if ($gnupgHome -match '^([A-Za-z]):') {
              $drive = $matches[1].ToLower()
              $gnupgHome = $gnupgHome -replace '^[A-Za-z]:', "$drive"
          }

          [System.Environment]::SetEnvironmentVariable("GNUPGHOME", "$gnupgHome/gnupg", "User")
          [System.Environment]::SetEnvironmentVariable("NUGET_PACKAGES", "D:\NuGet\Packages", "User")
        GetScript: return $false
        TestScript: return $false
    # Disable due to an error with winget configuration calls to DSC resource
    # See: https://github.com/microsoft/winget-cli/issues/4264
    # - resource: PSDscResources/WindowsOptionalFeature
    #   directives:
    #     description: Install Virtual Machine Platform
    #   settings:
    #     name: VirtualMachinePlatform
    #     ensure: Present
    # - resource: PSDscResources/WindowsOptionalFeature
    #   id: Microsoft.Wsl
    #   directives:
    #     description: Install Windows Subsystem for Linux
    #   settings:
    #     name: Microsoft-Windows-Subsystem-Linux
    #     ensure: Present
    # - resource: PSDscResources/Script
    #   id: Ubuntu
    #   dependsOn:
    #     - Microsoft.Wsl
    #   directives:
    #     description: Install Ubuntu for WSL
    #   settings:
    #     SetScript: |
    #       $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    #       wsl --install -d Ubuntu
    #     GetScript: return $false
    #     TestScript: return $false
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git
      directives:
        description: Install Git
        securityContext: elevated
      settings:
        id: Git.Git
    - resource: GitDsc/GitClone
      id: Dotfiles
      dependsOn:
        - DevDrive
        - Git
      directives:
        description: Clone dotfiles repository
      settings:
        HttpsUrl: https://github.com/ariellourenco/dotfiles/
        RootDirectory: D:\
        Ensure: Present
    - resource: PSDscResources/Script
      dependsOn:
        - Dotfiles
      directives:
        description: Install dotfiles
      settings:
        GetScript: return $false
        TestScript: return $false
        SetScript: |
          $sourceDir = "D:\dotfiles"
          $destinationDir = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData)

          Write-Verbose -Message "ðŸ”— Symlinking configuration files." -Verbose

          New-Item -ItemType SymbolicLink -Path "$destinationDir\Git" -Target "$sourceDir\git" -Force
    - resource: PSDscResources/Script
      dependsOn:
        - Dotfiles
      directives:
        description: Setup Windows PowerShell
        securityContext: elevated
      settings:
        GetScript: return $false
        TestScript: return $false
        SetScript: |
          $profile                = 'D:\dotfiles\windows\Profile.ps1'
          $windowsPSProfileFolder = "$env:USERPROFILE\Documents\WindowsPowerShell"
          $windowsPSFolder        = "$env:SystemRoot\System32\WindowsPowershell\v1.0"
          $windowsPSExe           = "$windowsPSFolder\powershell.exe"

          # DSC creates a dedicated PowerShell session for each configuration to manage dependencies per-configuration.
          # It uses a different $env:PSModulePath which enforce us to temporarily set the PSModulePath to run Windows PowerShell
          # instead of PowerShell to discover required modules available.
          # See: https://learn.microsoft.com/azure/governance/machine-configuration/whats-new/psdsc-in-machine-configuration
          $location = 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment'
          $env:PSModulePath = "$windowsPSProfileFolder\Modules" + ";" + (Get-ItemProperty $location).PSModulePath

          $powerShellGetVersion = Get-Module -ListAvailable -Name PowerShellGet | Select-Object -First 1 -ExpandProperty Version

          Write-Debug "PowerShellGet version $powerShellGetVersion"

          if ($powerShellGetVersion -lt [version]"1.6.0") {
            # Windows PowerShell 5.1 comes with version 1.0.0.1 of the PowerShellGet and PackageManagement preinstalled.
            # However, this version of PowerShellGet has a limited features and must be updated to work with
            # the PowerShell Gallery.
            throw "The installed PowerShellGet version ($powerShellGetVersion) is less than the required version 1.6.0."
          }

          Write-Verbose -Message "ðŸ§© Installing PowerShell modules." -Verbose

          & $windowsPSExe -Command "Install-Module -Name PSReadLine -Scope CurrentUser -Force"
          & $windowsPSExe -Command "Install-Module -Name posh-git -Scope CurrentUser -Force"
          & $windowsPSExe -Command "Install-Module -Name Terminal-Icons -Scope CurrentUser -Force"

          Write-Verbose -Message "ðŸ”— Symlinking Profile.ps1 to $windowsPSProfileFolder directory." -Verbose

          New-Item -ItemType SymbolicLink -Path "$windowsPSProfileFolder\Profile.ps1'" -Target $profile -Force